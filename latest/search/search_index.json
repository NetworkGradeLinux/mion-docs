{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"mion mion is a bare-metal operating system for network devices, with security and supportability at it's core. View it on GitHub Greetings and welcome to our mion documentation site. Before continuing, it's always a good idea to check the version selector in the upper left menu. mion provides a network operating system(NOS) focusing on enterprise level managed switches with support for the Open Network Install Environment(ONIE) and the Open Network Linux Platform API . The core function of mion is providing a secure, reliable, and performant operating system. Designed for environments that maintain critical elements such as Critical National Infrastructure, scalable from datacenter to telco, all done securely. As network devices are highly visible targets, where attacks could cause catastrophic harm through failure, a secure software foundation with a strong and supportive community is vital. With mion being built from the Yocto Project, security is baked in. The mion team values inclusiveness and diversity. This is not just a slogan for us, it is the philosophy that underpins the team. We work hard to ensure that we respect, value and encourage participation from every walk of life. For us, community is core. If you'd like to jump right in, check out our getting started guide , or see our community page on how you can get involved, or to simply say hello! \u00a9 2021 Network Grade Linux. Copyright \u00a9 2021 Network Grade Linux The Linux Foundation\u00ae . All rights reserved. The Linux Foundation has registered trademarks and uses trademarks. For a list of trademarks of The Linux Foundation, please see our Trademark Usage page page. Linux is a registered trademark of Linus Torvalds. Privacy Policy and Terms of Use .","title":"Home"},{"location":"#mion","text":"mion is a bare-metal operating system for network devices, with security and supportability at it's core. View it on GitHub Greetings and welcome to our mion documentation site. Before continuing, it's always a good idea to check the version selector in the upper left menu. mion provides a network operating system(NOS) focusing on enterprise level managed switches with support for the Open Network Install Environment(ONIE) and the Open Network Linux Platform API . The core function of mion is providing a secure, reliable, and performant operating system. Designed for environments that maintain critical elements such as Critical National Infrastructure, scalable from datacenter to telco, all done securely. As network devices are highly visible targets, where attacks could cause catastrophic harm through failure, a secure software foundation with a strong and supportive community is vital. With mion being built from the Yocto Project, security is baked in. The mion team values inclusiveness and diversity. This is not just a slogan for us, it is the philosophy that underpins the team. We work hard to ensure that we respect, value and encourage participation from every walk of life. For us, community is core. If you'd like to jump right in, check out our getting started guide , or see our community page on how you can get involved, or to simply say hello! \u00a9 2021 Network Grade Linux. Copyright \u00a9 2021 Network Grade Linux The Linux Foundation\u00ae . All rights reserved. The Linux Foundation has registered trademarks and uses trademarks. For a list of trademarks of The Linux Foundation, please see our Trademark Usage page page. Linux is a registered trademark of Linus Torvalds. Privacy Policy and Terms of Use .","title":"mion"},{"location":"ACCESSIBILITY/","text":"Accessibility This documentation endeavours to be as accessible as possible with respect to the World Wide Web Consortium's (w3c) Web Accessibilty Initiative (WAI), and Web Content Accessibility Guidelines . To that end, any alterations to the documentation must make sure that the following tools do not provide any errors from an accessibility point of view: tota11y browser app; Google Chrome's Lighthouse , running in incognito mode; WAVE Web Accessibility Evaluation Tool.","title":"Accessibility"},{"location":"ACCESSIBILITY/#accessibility","text":"This documentation endeavours to be as accessible as possible with respect to the World Wide Web Consortium's (w3c) Web Accessibilty Initiative (WAI), and Web Content Accessibility Guidelines . To that end, any alterations to the documentation must make sure that the following tools do not provide any errors from an accessibility point of view: tota11y browser app; Google Chrome's Lighthouse , running in incognito mode; WAVE Web Accessibility Evaluation Tool.","title":"Accessibility"},{"location":"acknowledgements/","text":"Acknowledgements Special thanks goes out to Tog\u00e1n Labs , APS Networks and Age of Peers for initiating this project with heart, soul and euro's. Eil\u00eds N\u00ed Fhlannag\u00e1in Katrina Prosise Niamh McNally John Toomey Sin\u00e9ad Redmond Sarah Wagner Kamal Bhatt Alexander Jeffries Andrew Heal Gawen Davey J\u00f6rg Peter Hahn Mike Duffy Rory MacDonald ben van 't ende","title":"Acknowedgements"},{"location":"acknowledgements/#acknowledgements","text":"Special thanks goes out to Tog\u00e1n Labs , APS Networks and Age of Peers for initiating this project with heart, soul and euro's. Eil\u00eds N\u00ed Fhlannag\u00e1in Katrina Prosise Niamh McNally John Toomey Sin\u00e9ad Redmond Sarah Wagner Kamal Bhatt Alexander Jeffries Andrew Heal Gawen Davey J\u00f6rg Peter Hahn Mike Duffy Rory MacDonald ben van 't ende","title":"Acknowledgements"},{"location":"getting-started/","text":"Getting Started Guide Pre-Requirements This documentation is for dev/latest which uses Yocto Project Dunfell If you are new to Yocto Project development, check out Overview and Concepts and the Quick Build guide to set up your build host and become familiar with the workflow. We provide a quick overview below. Already familiar and want to get started building mion? Then checkout the mion README for a quick-start guide. Build Host Whether on a laptop or a high-powered build server, make sure that... You have 50 GB available Why so much when the resulting image is so tiny? Think of it as a small cake; Even if the end result can fit in a small box, you will still need a whole kitchen in order to bake it. git 1.8.3.1 or greater tar 1.28 or greater python 3.5.0 or greater gcc 5.0 or greater Ubuntu (16.04 -18.04) and Debian GNU/Linux (8.x-10.x) sudo apt-get install gawk wget git-core diffstat unzip texinfo gcc-multilib \\ build-essential chrpath socat cpio python3 python3-pip python3-pexpect \\ xz-utils debianutils iputils-ping python3-git python3-jinja2 libegl1-mesa \\ libsdl1.2-dev pylint3 xterm for Ubuntu, make sure that you are using bash rather than dash: sudo dpkg-reconfigure dash select No to use bash. Fedora (28-32) sudo dnf install gawk make wget tar bzip2 gzip python3 unzip perl patch \\ diffutils diffstat git cpp gcc gcc-c++ glibc-devel texinfo chrpath \\ ccache perl-Data-Dumper perl-Text-ParseWords perl-Thread-Queue perl-bignum\\ socat python3-pexpect findutils which file cpio python python3-pip xz \\ python3-GitPython python3-jinja2 SDL-devel xterm rpcgen CentOS(7.x) $ sudo yum install -y epel-release $ sudo yum makecache $ sudo yum install gawk make wget tar bzip2 gzip python3 unzip perl patch \\ diffutils diffstat git cpp gcc gcc-c++ glibc-devel texinfo chrpath socat \\ perl-Data-Dumper perl-Text-ParseWords perl-Thread-Queue python36-pip xz \\ which SDL-devel xterm $ sudo pip3 install GitPython jinja2 OpenSUSE Leap (15.1) sudo zypper install python gcc gcc-c++ git chrpath make wget python-xml \\ diffstat makeinfo python-curses patch socat python3 python3-curses tar \\ python3-pip python3-pexpect xz which python3-Jinja2 Mesa-libEGL1 \\ libSDL-devel xterm rpcgen $ sudo pip3 install GitPython The above requirements and build host packages are originally from Yocto Project Quick Build Copyright 2010-2020 Linux Foundation, under the Creative Commons Attribution-Share Alike 2.0 UK: England & Wales . We added the cake. Obtaining mion Sources If you are ready to start building mion: git clone --recursive https://github.com/NetworkGradeLinux/mion.git cd mion # To obtain related mion layers: git clone https://github.com/NetworkGradeLinux/meta-mion.git # Obtain the mion hardware layer git clone https://github.com/NetworkGradeLinux/meta-mion-bsp.git git clone https://github.com/NetworkGradeLinux/meta-mion-sde.git The main repository for mion contains sub-modules for OpenEmbedded and Yocto Project of layers which mion depends on. To properly clone them, rather than just the top directory, the --recursive argument is required. mion provides the build script (mc_build.sh) and configuration files in build/conf/ . The meta-mion layer provides mion distro configuration. Basic Usage To begin, set up the build environment using the OpenEmbedded init script: source openembedded-core/oe-init-build-env This will place you in the build directory. Afterwords you can use our build script. Running ../mc_build.sh without arguments displays basic usage. In general: ../mc_build.sh -m <machine> -c <container config>:<container image> -h <host config>:<host_image> -d container_image To do a \"dry run\" without running a build, add -e which emits what would have run if you ran this from bitbake. If you want to disable the auto-starting of the container, use -d with a comma delineated list of the container image name. If you are familiar with Yocto Project development and multiconfig and wish to use bitbake directly for builds, see the local.conf for variables that need to be set. You can also get the variables by running the mc_build.sh script with the build variables you wish to use along with the -e option and prepending the BB_ENV_EXTRAWHITE output to the bitbake command you which to use in order to pass them in on the command line. Note: The script can not always determine the vendor name, if you encounter that issue,or just want to be sure, you can use -v <VENDOR> to specify. Build Script Examples # Builds an ONLPV1 Guest, installs it on a mender updatable host and autostarts ../mc_build.sh -m stordis-bf2556x-1t -c guest:mion-guest-onlpv1 -h host-mender:mion-host # Builds just an ONLPV1 Guest. Useful for creating update artifacts. ../mc_build.sh -m stordis-bf2556x-1t -c guest:mion-guest-onlpv1 # Builds an ONLPV1 ONIE image ../mc_build.sh -m stordis-bf2556x-1t -h host-onie:mion-onie-image-onlpv1 # Builds an image with ONLPV2 and ONLPV1 guests but disables ONLPV1 guest ../mc_build.sh -m stordis-bf2556x-1t -c guest:mion-guest-onlpv1,guest:mion-guest-onlpv2 -h host-mender:mion-host -d mion-guest-onlpv1 # Emits the commandline to build an image with ONLPV2 and ONLPV1 guests but disables ONLPV1 guest ../mc_build.sh -e -m stordis-bf2556x-1t -c guest:mion-guest-onlpv1,guest:mion-guest-onlpv2 -h host-mender:mion-host -d mion-guest-onlpv1 # Builds a qemu image with ONLPV1, useful for testing purposes ../mc_build.sh -v qemu -m qemux86-64 -h host-onie:mion-image-onlpv1 Image Creation Once you've gone through the pre-requirements, have your build host set up, and looked at the build script examples, you're ready to create an image yourself. After you run the mc_build.sh script, bitbake gets called, first parsing all the recipes and making sure your local.conf and bblayers.conf looks good, before going to work \"baking\" your image! Much like a multilayer cake, how fast it gets finished is going to depend on the quantity and complexities of the layers, and how reliable your baking setup is! While you enjoy a relaxing break, keep an eye on the screen for something like this: Assuming you are still in the build directory, you'll find the finished images and related items such as the onie-installer in tmp-glibc/deploy/images/<VENDOR>-<MACHINE>/ Build Process Plan on the initial run to take some time, with following builds being much less. For a Linux VM with V Virtual CPUs and 32G RAM, a build will likely break down as follows: Fetching sources and setting up build environment : 5 minutes Building of the image : 3 hours Deploying mion via ONIE : 5 minutes per switch You're finally done with this guide? Now it's time for Installing mion ! If you've built the qemu image, from the build directory, run: runqemu may require setting up a tap interface. See meta-mion-qemu/README for more information. runqemu tmp-glibc/deploy/images/qemux86-64/ This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License .","title":"Getting Started Guide"},{"location":"getting-started/#getting-started-guide","text":"","title":"Getting Started Guide"},{"location":"getting-started/#pre-requirements","text":"This documentation is for dev/latest which uses Yocto Project Dunfell If you are new to Yocto Project development, check out Overview and Concepts and the Quick Build guide to set up your build host and become familiar with the workflow. We provide a quick overview below. Already familiar and want to get started building mion? Then checkout the mion README for a quick-start guide.","title":"Pre-Requirements"},{"location":"getting-started/#build-host","text":"Whether on a laptop or a high-powered build server, make sure that... You have 50 GB available Why so much when the resulting image is so tiny? Think of it as a small cake; Even if the end result can fit in a small box, you will still need a whole kitchen in order to bake it. git 1.8.3.1 or greater tar 1.28 or greater python 3.5.0 or greater gcc 5.0 or greater","title":"Build Host"},{"location":"getting-started/#ubuntu-1604-1804-and-debian-gnulinux-8x-10x","text":"sudo apt-get install gawk wget git-core diffstat unzip texinfo gcc-multilib \\ build-essential chrpath socat cpio python3 python3-pip python3-pexpect \\ xz-utils debianutils iputils-ping python3-git python3-jinja2 libegl1-mesa \\ libsdl1.2-dev pylint3 xterm for Ubuntu, make sure that you are using bash rather than dash: sudo dpkg-reconfigure dash select No to use bash.","title":"Ubuntu (16.04 -18.04) and Debian GNU/Linux (8.x-10.x)"},{"location":"getting-started/#fedora-28-32","text":"sudo dnf install gawk make wget tar bzip2 gzip python3 unzip perl patch \\ diffutils diffstat git cpp gcc gcc-c++ glibc-devel texinfo chrpath \\ ccache perl-Data-Dumper perl-Text-ParseWords perl-Thread-Queue perl-bignum\\ socat python3-pexpect findutils which file cpio python python3-pip xz \\ python3-GitPython python3-jinja2 SDL-devel xterm rpcgen","title":"Fedora (28-32)"},{"location":"getting-started/#centos7x","text":"$ sudo yum install -y epel-release $ sudo yum makecache $ sudo yum install gawk make wget tar bzip2 gzip python3 unzip perl patch \\ diffutils diffstat git cpp gcc gcc-c++ glibc-devel texinfo chrpath socat \\ perl-Data-Dumper perl-Text-ParseWords perl-Thread-Queue python36-pip xz \\ which SDL-devel xterm $ sudo pip3 install GitPython jinja2","title":"CentOS(7.x)"},{"location":"getting-started/#opensuse-leap-151","text":"sudo zypper install python gcc gcc-c++ git chrpath make wget python-xml \\ diffstat makeinfo python-curses patch socat python3 python3-curses tar \\ python3-pip python3-pexpect xz which python3-Jinja2 Mesa-libEGL1 \\ libSDL-devel xterm rpcgen $ sudo pip3 install GitPython The above requirements and build host packages are originally from Yocto Project Quick Build Copyright 2010-2020 Linux Foundation, under the Creative Commons Attribution-Share Alike 2.0 UK: England & Wales . We added the cake.","title":"OpenSUSE Leap (15.1)"},{"location":"getting-started/#obtaining-mion-sources","text":"If you are ready to start building mion: git clone --recursive https://github.com/NetworkGradeLinux/mion.git cd mion # To obtain related mion layers: git clone https://github.com/NetworkGradeLinux/meta-mion.git # Obtain the mion hardware layer git clone https://github.com/NetworkGradeLinux/meta-mion-bsp.git git clone https://github.com/NetworkGradeLinux/meta-mion-sde.git The main repository for mion contains sub-modules for OpenEmbedded and Yocto Project of layers which mion depends on. To properly clone them, rather than just the top directory, the --recursive argument is required. mion provides the build script (mc_build.sh) and configuration files in build/conf/ . The meta-mion layer provides mion distro configuration.","title":"Obtaining mion Sources"},{"location":"getting-started/#basic-usage","text":"To begin, set up the build environment using the OpenEmbedded init script: source openembedded-core/oe-init-build-env This will place you in the build directory. Afterwords you can use our build script. Running ../mc_build.sh without arguments displays basic usage. In general: ../mc_build.sh -m <machine> -c <container config>:<container image> -h <host config>:<host_image> -d container_image To do a \"dry run\" without running a build, add -e which emits what would have run if you ran this from bitbake. If you want to disable the auto-starting of the container, use -d with a comma delineated list of the container image name. If you are familiar with Yocto Project development and multiconfig and wish to use bitbake directly for builds, see the local.conf for variables that need to be set. You can also get the variables by running the mc_build.sh script with the build variables you wish to use along with the -e option and prepending the BB_ENV_EXTRAWHITE output to the bitbake command you which to use in order to pass them in on the command line. Note: The script can not always determine the vendor name, if you encounter that issue,or just want to be sure, you can use -v <VENDOR> to specify.","title":"Basic Usage"},{"location":"getting-started/#build-script-examples","text":"# Builds an ONLPV1 Guest, installs it on a mender updatable host and autostarts ../mc_build.sh -m stordis-bf2556x-1t -c guest:mion-guest-onlpv1 -h host-mender:mion-host # Builds just an ONLPV1 Guest. Useful for creating update artifacts. ../mc_build.sh -m stordis-bf2556x-1t -c guest:mion-guest-onlpv1 # Builds an ONLPV1 ONIE image ../mc_build.sh -m stordis-bf2556x-1t -h host-onie:mion-onie-image-onlpv1 # Builds an image with ONLPV2 and ONLPV1 guests but disables ONLPV1 guest ../mc_build.sh -m stordis-bf2556x-1t -c guest:mion-guest-onlpv1,guest:mion-guest-onlpv2 -h host-mender:mion-host -d mion-guest-onlpv1 # Emits the commandline to build an image with ONLPV2 and ONLPV1 guests but disables ONLPV1 guest ../mc_build.sh -e -m stordis-bf2556x-1t -c guest:mion-guest-onlpv1,guest:mion-guest-onlpv2 -h host-mender:mion-host -d mion-guest-onlpv1 # Builds a qemu image with ONLPV1, useful for testing purposes ../mc_build.sh -v qemu -m qemux86-64 -h host-onie:mion-image-onlpv1","title":"Build Script Examples"},{"location":"getting-started/#image-creation","text":"Once you've gone through the pre-requirements, have your build host set up, and looked at the build script examples, you're ready to create an image yourself. After you run the mc_build.sh script, bitbake gets called, first parsing all the recipes and making sure your local.conf and bblayers.conf looks good, before going to work \"baking\" your image! Much like a multilayer cake, how fast it gets finished is going to depend on the quantity and complexities of the layers, and how reliable your baking setup is! While you enjoy a relaxing break, keep an eye on the screen for something like this: Assuming you are still in the build directory, you'll find the finished images and related items such as the onie-installer in tmp-glibc/deploy/images/<VENDOR>-<MACHINE>/","title":"Image Creation"},{"location":"getting-started/#build-process","text":"Plan on the initial run to take some time, with following builds being much less. For a Linux VM with V Virtual CPUs and 32G RAM, a build will likely break down as follows: Fetching sources and setting up build environment : 5 minutes Building of the image : 3 hours Deploying mion via ONIE : 5 minutes per switch You're finally done with this guide? Now it's time for Installing mion ! If you've built the qemu image, from the build directory, run: runqemu may require setting up a tap interface. See meta-mion-qemu/README for more information. runqemu tmp-glibc/deploy/images/qemux86-64/ This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License .","title":"Build Process"},{"location":"glossary/","text":"Glossary Yocto Project and mion mion : Mini Infrastucture Operating System for Networks - mion.io Open Embedded recipe : a set of instructions related to the fetching, building, or installation of a program within the Yocto Project Yocto Project : build system for custom embedded Linux distros Switch/Networking Terms and Projects i2c : Inter-IC, a simple device communications bus NOS : Network Operating System OCP : Open Compute Project ONF : Open Networking Foundation ONIE : Open Network Install Environment ONL : Open Network Linux ONLP : Open Network Linux Platform ONOS : Open Network Operating System OSI model: Open Systems Interconnection model P4 : programming language for network devices SAI : Switch Abstraction Interface SAL : Switch Abstraction Layer SDI : Serial Digital Interface SONiC : Software for Open Networking in the Cloud","title":"Glossary"},{"location":"glossary/#glossary","text":"","title":"Glossary"},{"location":"glossary/#yocto-project-and-mion","text":"mion : Mini Infrastucture Operating System for Networks - mion.io Open Embedded recipe : a set of instructions related to the fetching, building, or installation of a program within the Yocto Project Yocto Project : build system for custom embedded Linux distros","title":"Yocto Project and mion"},{"location":"glossary/#switchnetworking-terms-and-projects","text":"i2c : Inter-IC, a simple device communications bus NOS : Network Operating System OCP : Open Compute Project ONF : Open Networking Foundation ONIE : Open Network Install Environment ONL : Open Network Linux ONLP : Open Network Linux Platform ONOS : Open Network Operating System OSI model: Open Systems Interconnection model P4 : programming language for network devices SAI : Switch Abstraction Interface SAL : Switch Abstraction Layer SDI : Serial Digital Interface SONiC : Software for Open Networking in the Cloud","title":"Switch/Networking Terms and Projects"},{"location":"imagetypes/","text":"Image Types and Multiconfig There are three main types of images in mion: guest images : Provide container images for the host OS host images : Small host image for running guests core images : Provides a host image useful for bare image installs or ONIE installers Image Configurations where onlpv* can be \"onlpv1\" or \"onlpv2\" mion-guest-onlpv* : guest with ONLP installed mion-host : Host image for running guests mion-image-onlpv* : core image with ONLP installed mion-onie-image-onlpv* : host with ONLP ONIE Not all platforms support all image configurations Multiconfig mion utilizes multiconfig to provide system profiles for either guest or host (including non-container supporting images). We utilise this to enable end users to use one image for multiple use cases, for example, using mion-image-onlpv1 as both a QEMU image or an ONIE installer image. The following self explanatory config files can be found in build/conf/multiconfig : guest.conf host.conf host-mender.conf host-onie.conf","title":"Image Types"},{"location":"imagetypes/#image-types-and-multiconfig","text":"There are three main types of images in mion: guest images : Provide container images for the host OS host images : Small host image for running guests core images : Provides a host image useful for bare image installs or ONIE installers","title":"Image Types and Multiconfig"},{"location":"imagetypes/#image-configurations","text":"where onlpv* can be \"onlpv1\" or \"onlpv2\" mion-guest-onlpv* : guest with ONLP installed mion-host : Host image for running guests mion-image-onlpv* : core image with ONLP installed mion-onie-image-onlpv* : host with ONLP ONIE Not all platforms support all image configurations","title":"Image Configurations"},{"location":"imagetypes/#multiconfig","text":"mion utilizes multiconfig to provide system profiles for either guest or host (including non-container supporting images). We utilise this to enable end users to use one image for multiple use cases, for example, using mion-image-onlpv1 as both a QEMU image or an ONIE installer image. The following self explanatory config files can be found in build/conf/multiconfig : guest.conf host.conf host-mender.conf host-onie.conf","title":"Multiconfig"},{"location":"installing_mion/","text":"Installing mion After building mion, images for installation and related artifacts can be found in build/tmp-glibc/deploy/images/<MACHINE>/ . Files may differing depending on machine configuration. Image types Mender images( <image_name>.hddimg ): write to a USB key to install on bare metal ONIE compliant images ( <image_name>.bin ): install on a switch with ONIE installed Mender Flash the mender image to a USB key dd or similar tool. If needed, change the boot order in UEFI (BIOS) to boot from the USB key. You will ask for confirmation to install the image. This image is a bare metal image that erases any other partition, such as ONIE or other installed OSes ONIE The ONIE image can be installed on the system using any ONIE supported installation method . We recommend that you use a TFTP server with a known hostname for installation however other options can be used. ONIE will be installed alongside other OS and will automatically update the boot options. ONIE images do not currently support the simple-runc container system","title":"Installing mion"},{"location":"installing_mion/#installing-mion","text":"After building mion, images for installation and related artifacts can be found in build/tmp-glibc/deploy/images/<MACHINE>/ . Files may differing depending on machine configuration.","title":"Installing mion"},{"location":"installing_mion/#image-types","text":"Mender images( <image_name>.hddimg ): write to a USB key to install on bare metal ONIE compliant images ( <image_name>.bin ): install on a switch with ONIE installed","title":"Image types"},{"location":"installing_mion/#mender","text":"Flash the mender image to a USB key dd or similar tool. If needed, change the boot order in UEFI (BIOS) to boot from the USB key. You will ask for confirmation to install the image. This image is a bare metal image that erases any other partition, such as ONIE or other installed OSes","title":"Mender"},{"location":"installing_mion/#onie","text":"The ONIE image can be installed on the system using any ONIE supported installation method . We recommend that you use a TFTP server with a known hostname for installation however other options can be used. ONIE will be installed alongside other OS and will automatically update the boot options. ONIE images do not currently support the simple-runc container system","title":"ONIE"},{"location":"resources/","text":"Resources Mion Network Grade Linux : Parent project of mion mion : Base mion github repository meta-mion : GitHub repository for the base distro layer meta-mion-bsp Board/machine configurations and support layers Yocto Project and OpenEmbedded The Yocto Project : Build environment and system for custom embedded Linux Distributions. Maintains bitbake , OpenEmbedded Core, and Poky. BitBake User Manual : Direct links for: Recipes Configuration files Classes Layers Append files Yocto Documentation Yocto Project Overview and Concepts Manual OpenEmbedded :Build framework for embedded Linux OpenEmbedded-Core : Core support for machine architectures (x86-64, arm, etc) Builds only for QEMU/emulated machines Layer : A collection of recipes and configurations that can be used on top of OpenEmbedded Core. OpenEmbedded layer index","title":"Resources"},{"location":"resources/#resources","text":"","title":"Resources"},{"location":"resources/#mion","text":"Network Grade Linux : Parent project of mion mion : Base mion github repository meta-mion : GitHub repository for the base distro layer meta-mion-bsp Board/machine configurations and support layers","title":"Mion"},{"location":"resources/#yocto-project-and-openembedded","text":"The Yocto Project : Build environment and system for custom embedded Linux Distributions. Maintains bitbake , OpenEmbedded Core, and Poky. BitBake User Manual : Direct links for: Recipes Configuration files Classes Layers Append files Yocto Documentation Yocto Project Overview and Concepts Manual OpenEmbedded :Build framework for embedded Linux OpenEmbedded-Core : Core support for machine architectures (x86-64, arm, etc) Builds only for QEMU/emulated machines Layer : A collection of recipes and configurations that can be used on top of OpenEmbedded Core. OpenEmbedded layer index","title":"Yocto Project and OpenEmbedded"},{"location":"supported-switches/","text":"mion supported switches mion 2021.03 Blasket supports the following switches. To add a new switch, we have a mion porting guide . Vendor Model Arch ASIC Config First Release APS (Stordis) BF2556X-1T x86_64 BF Tofino 1 1U 48x25GB + 8x100GB 2020.12 APS (Stordis) BF6064X-T x86_64 BF Tofino 1 2U 64x40/50/100Gb 2020.12 Edgecore ASGvOLT-64 x86_64 Broadcom Qumran-AX 2U 64xGPON + 2x100GB 2020.12 Edgecore Wedge100BF-32X x86_64 BF Tofino 1 1U 32x100Gb 2020.12 Edgecore Wedge100BF-65X x86_64 BF Tofino 1 2U 65x100Gb 2020.12 QEMU qemux86-64 x86_64 -- -- 2021.03","title":"Supported switches"},{"location":"supported-switches/#mion-supported-switches","text":"mion 2021.03 Blasket supports the following switches. To add a new switch, we have a mion porting guide . Vendor Model Arch ASIC Config First Release APS (Stordis) BF2556X-1T x86_64 BF Tofino 1 1U 48x25GB + 8x100GB 2020.12 APS (Stordis) BF6064X-T x86_64 BF Tofino 1 2U 64x40/50/100Gb 2020.12 Edgecore ASGvOLT-64 x86_64 Broadcom Qumran-AX 2U 64xGPON + 2x100GB 2020.12 Edgecore Wedge100BF-32X x86_64 BF Tofino 1 1U 32x100Gb 2020.12 Edgecore Wedge100BF-65X x86_64 BF Tofino 1 2U 65x100Gb 2020.12 QEMU qemux86-64 x86_64 -- -- 2021.03","title":"mion supported switches"},{"location":"trusted-platform-module/","text":"Trusted Platform Module Trusted Platform Module (TPM) support in mion : TPM support is provided by the meta-security/meta-tpm layer. For any system with a TPM2 chip, add tpm2 to MACHINE_FEATURES in meta-mion-bsp/<vendor>/conf/machine/<machine_name>.conf to include both the required kernel drivers, and a number of user-space TPM2 tools. The kernel module is automatically loaded on boot and will create a device node (usually /dev/tpm0 ) which provides access to the hardware.","title":"Trusted Platform Module"},{"location":"trusted-platform-module/#trusted-platform-module","text":"Trusted Platform Module (TPM) support in mion : TPM support is provided by the meta-security/meta-tpm layer. For any system with a TPM2 chip, add tpm2 to MACHINE_FEATURES in meta-mion-bsp/<vendor>/conf/machine/<machine_name>.conf to include both the required kernel drivers, and a number of user-space TPM2 tools. The kernel module is automatically loaded on boot and will create a device node (usually /dev/tpm0 ) which provides access to the hardware.","title":"Trusted Platform Module"},{"location":"community/Coc-interpretation/","text":"Interpretation of the Code of Conduct Taking inspiration from the Linux Kernel Contributor Code of Conduct Interpretation , we are providing our interpretation of the aforementioned Code of Conduct which has been adopted for use for mion; this allows for adaptation specific to our project. As Network Grade Linux grows and changes over time, so may our interpretation. Expect this document to be subject to change. Changes to our interpretation, if and when they do occur, will be announced through the appropriate community communication channels, and a changelog will be attached at the end of this document. Standards While the Code of Conduct provides examples of behavior that contributes to a positive environment, we acknowledge that these are only examples, and that they serve as a point of reference; that is, the behavior we expect in our community goes beyond the examples. We also believe that our standards should not only avoid being disrespectful or harmful, but should work towards the goal of actively welcoming others into the community. In other words, we strive to create an environment where individuals know that they will be respected and welcomed before they joined and not only after they have done so. In line with our standards is our style-guide , which we expect contributors to be familiar with, and to follow our guidelines on Inclusivity and Supporting Diversity. Responsibilities Maintainers Definition of Maintainers When referenced in the Code of Conduct, maintainer applies to those responsible for the approval of merging branches, acceptance of patches, and general maintenance of any repository belonging to Network Grade Linux. The term also extends to the individual or individuals who monitor general communication channels such as, but not limited to any Slack channels not specific to a given repository. This role belongs to the project team contact or contacts provided under the Enforcement section of our Code of Conduct. The maintainers are generally listed within each repository README.md . Code of Conduct Responsibilities for Maintainers Our maintainers are expected to model the Code of Conduct, and to address unacceptable behavior. Responses to possible violations are expected to be performed in a timely fashion, while also taking the time to communicate with the project's leaders to ensure that any actions taken are done so in a thoughtful mannor which represents our values. Scope The scope extends to accounts which submit patches and pull requests, such as on Github. Enforcement It is preferable that reports are submitted to the project team lead mentioned under the Code of Conduct. That said, it is also expected that all maintainers and project leadership will monitor the community, actively addressing situations by discussing possible violation with leadership, rather than only taking action when a report is made.","title":"CoC Interpretation"},{"location":"community/Coc-interpretation/#interpretation-of-the-code-of-conduct","text":"Taking inspiration from the Linux Kernel Contributor Code of Conduct Interpretation , we are providing our interpretation of the aforementioned Code of Conduct which has been adopted for use for mion; this allows for adaptation specific to our project. As Network Grade Linux grows and changes over time, so may our interpretation. Expect this document to be subject to change. Changes to our interpretation, if and when they do occur, will be announced through the appropriate community communication channels, and a changelog will be attached at the end of this document.","title":"Interpretation of the Code of Conduct"},{"location":"community/Coc-interpretation/#standards","text":"While the Code of Conduct provides examples of behavior that contributes to a positive environment, we acknowledge that these are only examples, and that they serve as a point of reference; that is, the behavior we expect in our community goes beyond the examples. We also believe that our standards should not only avoid being disrespectful or harmful, but should work towards the goal of actively welcoming others into the community. In other words, we strive to create an environment where individuals know that they will be respected and welcomed before they joined and not only after they have done so. In line with our standards is our style-guide , which we expect contributors to be familiar with, and to follow our guidelines on Inclusivity and Supporting Diversity.","title":"Standards"},{"location":"community/Coc-interpretation/#responsibilities","text":"","title":"Responsibilities"},{"location":"community/Coc-interpretation/#maintainers","text":"","title":"Maintainers"},{"location":"community/Coc-interpretation/#definition-of-maintainers","text":"When referenced in the Code of Conduct, maintainer applies to those responsible for the approval of merging branches, acceptance of patches, and general maintenance of any repository belonging to Network Grade Linux. The term also extends to the individual or individuals who monitor general communication channels such as, but not limited to any Slack channels not specific to a given repository. This role belongs to the project team contact or contacts provided under the Enforcement section of our Code of Conduct. The maintainers are generally listed within each repository README.md .","title":"Definition of Maintainers"},{"location":"community/Coc-interpretation/#code-of-conduct-responsibilities-for-maintainers","text":"Our maintainers are expected to model the Code of Conduct, and to address unacceptable behavior. Responses to possible violations are expected to be performed in a timely fashion, while also taking the time to communicate with the project's leaders to ensure that any actions taken are done so in a thoughtful mannor which represents our values.","title":"Code of Conduct Responsibilities for Maintainers"},{"location":"community/Coc-interpretation/#scope","text":"The scope extends to accounts which submit patches and pull requests, such as on Github.","title":"Scope"},{"location":"community/Coc-interpretation/#enforcement","text":"It is preferable that reports are submitted to the project team lead mentioned under the Code of Conduct. That said, it is also expected that all maintainers and project leadership will monitor the community, actively addressing situations by discussing possible violation with leadership, rather than only taking action when a report is made.","title":"Enforcement"},{"location":"community/Community/","text":"The Network Grade Linux Community Welcome to Network Grade Linux/mion! Community is where open source lives and thrives. Whether you have questions about using mion or code to contribute, below you'll find useful information on how to participate and become a member of our community! First, please read and agree to our Code of Conduct . How to Participate There are a number of ways to participate, from contributing code and documentation to communicating with others in the community. Each repository may have different requirements for contributing, in which case it can be found in the CONTRIBUTING.md in the repository's root. For an overview of how to contribute, including patch guidelines and git workflow, see mion/CONTRIBUTING.md . We also have our developer wiki with meeting minutes, development process, and other information for those who are getting involved with contributing. Getting in Touch The best way to get in touch is Slack , or you can attend one of our public meetings. Slack All are welcome to stop by, introduce themselves, and say hi to us over on Slack! Here's our current Slack channels, and what each are used for: general: news, announcements and project wide discussions, good place to introduce yourself to everyone! gh-notify: reserved for automated Github updates on CI builds, issue statuses, and pull requests network-grade-linux: mostly technical discussions, this is where you should ask questions regarding mion random: this is a great place to say hi and simply hangout and chat While not required, we suggest filling out your slack profile with what you do, and adding where you work in parentheses in your display name. Keep in mind that many of us are in different time zones, so replies may take some time. Public Meetings Public meetings are subject to changes, it is always best to check on our Slack #general channel for updates. Meetings are done over Zoom. NGL Fortnightly Bug Triage : Every other Wednesday 1600-1700 UTC (04:00-05:00 PM) NGL Fortnightly Engineering Sync Documentation meeting : Every other Thursday starting on 2021-01-14 at 13:15-13:45 UTC (13:15-13:45 PM)","title":"About our Community"},{"location":"community/Community/#the-network-grade-linux-community","text":"Welcome to Network Grade Linux/mion! Community is where open source lives and thrives. Whether you have questions about using mion or code to contribute, below you'll find useful information on how to participate and become a member of our community! First, please read and agree to our Code of Conduct .","title":"The Network Grade Linux Community"},{"location":"community/Community/#how-to-participate","text":"There are a number of ways to participate, from contributing code and documentation to communicating with others in the community. Each repository may have different requirements for contributing, in which case it can be found in the CONTRIBUTING.md in the repository's root. For an overview of how to contribute, including patch guidelines and git workflow, see mion/CONTRIBUTING.md . We also have our developer wiki with meeting minutes, development process, and other information for those who are getting involved with contributing.","title":"How to Participate"},{"location":"community/Community/#getting-in-touch","text":"The best way to get in touch is Slack , or you can attend one of our public meetings.","title":"Getting in Touch"},{"location":"community/Community/#slack","text":"All are welcome to stop by, introduce themselves, and say hi to us over on Slack! Here's our current Slack channels, and what each are used for: general: news, announcements and project wide discussions, good place to introduce yourself to everyone! gh-notify: reserved for automated Github updates on CI builds, issue statuses, and pull requests network-grade-linux: mostly technical discussions, this is where you should ask questions regarding mion random: this is a great place to say hi and simply hangout and chat While not required, we suggest filling out your slack profile with what you do, and adding where you work in parentheses in your display name. Keep in mind that many of us are in different time zones, so replies may take some time.","title":"Slack"},{"location":"community/Community/#public-meetings","text":"Public meetings are subject to changes, it is always best to check on our Slack #general channel for updates. Meetings are done over Zoom. NGL Fortnightly Bug Triage : Every other Wednesday 1600-1700 UTC (04:00-05:00 PM) NGL Fortnightly Engineering Sync Documentation meeting : Every other Thursday starting on 2021-01-14 at 13:15-13:45 UTC (13:15-13:45 PM)","title":"Public Meetings"},{"location":"community/code-of-conduct/","text":"Code of Conduct Our Pledge In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to make participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation. Our Standards Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting and giving constructive criticism Focusing on what is best for the community Showing compassion and kindness towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Our Responsibilities Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful. Scope This Code of Conduct applies within all project spaces, and it also applies when an individual is representing the project or its community in public spaces. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers. Enforcement Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at ben@ageofpeers.com . All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership. Attribution This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq Interpretation See our Interpretation of the Code of Conduct: CoC-interpretation","title":"Code of Conduct"},{"location":"community/code-of-conduct/#code-of-conduct","text":"","title":"Code of Conduct"},{"location":"community/code-of-conduct/#our-pledge","text":"In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to make participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.","title":"Our Pledge"},{"location":"community/code-of-conduct/#our-standards","text":"Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting and giving constructive criticism Focusing on what is best for the community Showing compassion and kindness towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"community/code-of-conduct/#our-responsibilities","text":"Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.","title":"Our Responsibilities"},{"location":"community/code-of-conduct/#scope","text":"This Code of Conduct applies within all project spaces, and it also applies when an individual is representing the project or its community in public spaces. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.","title":"Scope"},{"location":"community/code-of-conduct/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at ben@ageofpeers.com . All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.","title":"Enforcement"},{"location":"community/code-of-conduct/#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq","title":"Attribution"},{"location":"community/code-of-conduct/#interpretation","text":"See our Interpretation of the Code of Conduct: CoC-interpretation","title":"Interpretation"}]}