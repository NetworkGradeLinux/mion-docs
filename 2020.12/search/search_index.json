{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"mion {: .fs-9 } mion is a bare-metal operating system for network devices, with security and supportability at it's core. View it on GitHub mion provides a network operating system(NOS) focusing on enterprise level managed switches with support for the Open Network Install Environment(ONIE) support and the Open Network Linux Platform (ONLP) API. The core function of mion is to provide a secure, reliable and performant operating system suitable for use in highly secured environments. It is designed to function within environments that maintain elements such as Critical National Infrastructure, and can scale from datacenter, to telco and beyond securely. The mion team values inclusiveness and diversity. This is not just a slogan for us, it is the philosophy that underpins the team. We work hard to ensure that we respect, value and encourage participation from every walk of life. For us, community is core. As network devices are a high visibility target for attacks which could cause catastrophic harm through failure, a secure software foundation with a strong and supportive community is vital. With mion being built from the Yocto Project, security is baked in. Interested? Read more about mion and what makes us special. If you'd like to jump right in, check out our getting started guide , or see our community page on how you can get involved or to simply say hello!","title":"Home"},{"location":"#mion","text":"{: .fs-9 } mion is a bare-metal operating system for network devices, with security and supportability at it's core. View it on GitHub mion provides a network operating system(NOS) focusing on enterprise level managed switches with support for the Open Network Install Environment(ONIE) support and the Open Network Linux Platform (ONLP) API. The core function of mion is to provide a secure, reliable and performant operating system suitable for use in highly secured environments. It is designed to function within environments that maintain elements such as Critical National Infrastructure, and can scale from datacenter, to telco and beyond securely. The mion team values inclusiveness and diversity. This is not just a slogan for us, it is the philosophy that underpins the team. We work hard to ensure that we respect, value and encourage participation from every walk of life. For us, community is core. As network devices are a high visibility target for attacks which could cause catastrophic harm through failure, a secure software foundation with a strong and supportive community is vital. With mion being built from the Yocto Project, security is baked in. Interested? Read more about mion and what makes us special. If you'd like to jump right in, check out our getting started guide , or see our community page on how you can get involved or to simply say hello!","title":"mion"},{"location":"ACCESSIBILITY/","text":"Accessibility This documentation endeavours to be as accessible as possible with respect to the following the World Wide Web Consortium's (w3c) Web Accessibilty Initiative (WAI) and Web Content Accessibility Guideline. To that end, any alterations to the repository must make sure that the following tools do not provide any errors from an accessibility point of view: * tota11y browser app; * Google Chrome's Lighthouse , running in incognito mode; * WAVE Web Accessibility Evaluation Tool","title":"Accessibility"},{"location":"ACCESSIBILITY/#accessibility","text":"This documentation endeavours to be as accessible as possible with respect to the following the World Wide Web Consortium's (w3c) Web Accessibilty Initiative (WAI) and Web Content Accessibility Guideline. To that end, any alterations to the repository must make sure that the following tools do not provide any errors from an accessibility point of view: * tota11y browser app; * Google Chrome's Lighthouse , running in incognito mode; * WAVE Web Accessibility Evaluation Tool","title":"Accessibility"},{"location":"about/","text":"About Why Yocto? Embedded operating systems built through the Yocto Project are extremely reliable and highly supportable. With over 20,000 engineers worldwide working on Yocto Project based operating systems, it is almost guaranteed that you will be able to find commercial grade support. As such, they are pervasive and turn up in surprising places. From rockets to Mars cube satellites, Kindles and Jaguars, the Yocto Project is everywhere . It is chosen for these projects because it is designed to be stable and secure under great pressure and applied in increasingly hostile environments. Why mion? mion builds on Yocto by providing multiple ways of providing a NOS. One of these is a a lightweight container runtime that brings the benefits of containerisation to the world of bare metal. The entire software stack can be run in containers, even including significant portions of the OS itself. This also enables live updates, rollbacks, and repurposing without the need for a reboot. There are distinct images and configurations using bitbake's multiconfig for the base operating system and container guests. Application images are run through the container runtime, whereas system images are installed on bare-metal. System images paired with mion Board Support Packages incorporate a given platform's hardware and platform enablement; separating this from applications removes the need for the complex porting of applications to new hardware. mion also incorporates the Mender Over-The-Air (OTA) image based update service based on tools provided by Mender.io . Both application and system images can be managed and deployed remotely over HTTPS to a single host or an entire fleet of devices. The updates performed in A/B fashion; an update will be prepared in parallel with the running system, if it fails, the existing system will not break. What Does This All Mean? Embedded no longer means restrictive. Using mion, the operating system can be layered with additional applications and features. This includes applications, frameworks and SDK s and as such, it can be made into a fully featured Network Operating System, or development environment. You have freedom to make it what you want, knowing that the foundation comes from a place of security. Further, having a better understanding of the software stack running on your devices increases confidence in their ability to operate under pressure. And, more generally, embedded operating systems: - Have less runtime overhead; - Are intrinsically easier to understand; - Reduce the attack surface leveraged by malfeasors. What it is Not mion is not a Network Operating System (NOS) . A NOS typically comprises a base operating system (such as Debian ), which may or may not be modified, with networking applications on top. These applications process network traffic either directly from NIC s or by interfacing with device specific hardware. Arguably, the definition of a NOS is blurred. For example, Open Network Linux was marketed as a NOS but does not contain applications that provide networking functionality. It does however include platform interface libraries ( ONLP ).","title":"About"},{"location":"about/#about","text":"","title":"About"},{"location":"about/#why-yocto","text":"Embedded operating systems built through the Yocto Project are extremely reliable and highly supportable. With over 20,000 engineers worldwide working on Yocto Project based operating systems, it is almost guaranteed that you will be able to find commercial grade support. As such, they are pervasive and turn up in surprising places. From rockets to Mars cube satellites, Kindles and Jaguars, the Yocto Project is everywhere . It is chosen for these projects because it is designed to be stable and secure under great pressure and applied in increasingly hostile environments.","title":"Why Yocto?"},{"location":"about/#why-mion","text":"mion builds on Yocto by providing multiple ways of providing a NOS. One of these is a a lightweight container runtime that brings the benefits of containerisation to the world of bare metal. The entire software stack can be run in containers, even including significant portions of the OS itself. This also enables live updates, rollbacks, and repurposing without the need for a reboot. There are distinct images and configurations using bitbake's multiconfig for the base operating system and container guests. Application images are run through the container runtime, whereas system images are installed on bare-metal. System images paired with mion Board Support Packages incorporate a given platform's hardware and platform enablement; separating this from applications removes the need for the complex porting of applications to new hardware. mion also incorporates the Mender Over-The-Air (OTA) image based update service based on tools provided by Mender.io . Both application and system images can be managed and deployed remotely over HTTPS to a single host or an entire fleet of devices. The updates performed in A/B fashion; an update will be prepared in parallel with the running system, if it fails, the existing system will not break.","title":"Why mion?"},{"location":"about/#what-does-this-all-mean","text":"Embedded no longer means restrictive. Using mion, the operating system can be layered with additional applications and features. This includes applications, frameworks and SDK s and as such, it can be made into a fully featured Network Operating System, or development environment. You have freedom to make it what you want, knowing that the foundation comes from a place of security. Further, having a better understanding of the software stack running on your devices increases confidence in their ability to operate under pressure. And, more generally, embedded operating systems: - Have less runtime overhead; - Are intrinsically easier to understand; - Reduce the attack surface leveraged by malfeasors.","title":"What Does This All Mean?"},{"location":"about/#what-it-is-not","text":"mion is not a Network Operating System (NOS) . A NOS typically comprises a base operating system (such as Debian ), which may or may not be modified, with networking applications on top. These applications process network traffic either directly from NIC s or by interfacing with device specific hardware. Arguably, the definition of a NOS is blurred. For example, Open Network Linux was marketed as a NOS but does not contain applications that provide networking functionality. It does however include platform interface libraries ( ONLP ).","title":"What it is Not"},{"location":"acknowledgements/","text":"Special thanks goes out to Tog\u00e1n Labs , APS Networks and Age of Peers for initiating this project with heart, soul and euro's. Eil\u00eds N\u00ed Fhlannag\u00e1in Katrina Prosise Niamh McNally John Toomey Sin\u00e9ad Redmond Sarah Wagner Kamal Bhatt Alexander Jeffries Andrew Heal Gawen Davey J\u00f6rg Peter Hahn Mike Duffy Rory MacDonald ben van 't ende","title":"Acknowedgements"},{"location":"getting-started/","text":"This documentation is for mion blasket-2020.12 , which uses Yocto Project Dunfell Table of contents Pre-Requirements If you are new to Yocto Project development, check out Overview and Concepts and the Quick Build guide to set up your build host and become familiar with the workflow. We provide a quick overview below. Already familiar and want to get started building mion? Then checkout the mion README for a quick-start guide. Build Host Whether on a laptop or a high-powered build server, make sure that... You have 50 GB available Why so much when the resulting image is so tiny? Think of it as a small cake; Even if the end result can fit in a small box, you will still need a whole kitchen in order to bake it. git 1.8.3.1 or greater tar 1.28 or greater python 3.5.0 or greater gcc 5.0 or greater Ubuntu (16.04 -18.04) and Debian GNU/Linux (8.x-10.x) sudo apt-get install gawk wget git-core diffstat unzip texinfo gcc-multilib \\ build-essential chrpath socat cpio python3 python3-pip python3-pexpect \\ xz-utils debianutils iputils-ping python3-git python3-jinja2 libegl1-mesa \\ libsdl1.2-dev pylint3 xterm for Ubuntu, make sure that you are using bash rather than dash: sudo dpkg-reconfigure dash select No to use bash. Fedora (28-32) sudo dnf install gawk make wget tar bzip2 gzip python3 unzip perl patch \\ diffutils diffstat git cpp gcc gcc-c++ glibc-devel texinfo chrpath \\ ccache perl-Data-Dumper perl-Text-ParseWords perl-Thread-Queue perl-bignum\\ socat python3-pexpect findutils which file cpio python python3-pip xz \\ python3-GitPython python3-jinja2 SDL-devel xterm rpcgen CentOS(7.x) $ sudo yum install -y epel-release $ sudo yum makecache $ sudo yum install gawk make wget tar bzip2 gzip python3 unzip perl patch \\ diffutils diffstat git cpp gcc gcc-c++ glibc-devel texinfo chrpath socat \\ perl-Data-Dumper perl-Text-ParseWords perl-Thread-Queue python36-pip xz \\ which SDL-devel xterm $ sudo pip3 install GitPython jinja2 OpenSUSE Leap (15.1) sudo zypper install python gcc gcc-c++ git chrpath make wget python-xml \\ diffstat makeinfo python-curses patch socat python3 python3-curses tar \\ python3-pip python3-pexpect xz which python3-Jinja2 Mesa-libEGL1 \\ libSDL-devel xterm rpcgen $ sudo pip3 install GitPython The above requirements and build host packages are originally from Yocto Project Quick Build Copyright 2010-2020 Linux Foundation, under the Creative Commons Attribution-Share Alike 2.0 UK: England & Wales . We added the cake. Obtaining mion Sources If you are ready to start building mion: git clone --recursive git@github.com:NetworkGradeLinux/mion.git cd mion # To obtain related mion layers: git clone git@github.com:NetworkGradeLinux/meta-mion.git # Obtain the mion hardware layer git clone git@github.com:NetworkGradeLinux/meta-mion-bsp.git The main repository for mion contains sub-modules for OpenEmbedded and Yocto Project of layers which mion depends on. To properly clone them, rather than just the top directory, the --recursive argument is required. mion provides the build script (mc_build.sh) and configuration files in build/conf/ . The meta-mion layer provides mion distro configuration. Basic Usage To begin, set up the build environment using the OpenEmbedded init script: source openembedded-core/oe-init-build-env This will place you in the build directory. Afterwords you can use our build script. Running ../mc_build.sh without arguments displays basic usage. In general: ../mc_build.sh -m <machine> -c <container config>:<container image> -h <host config>:<host_image> -d container_image To do a \"dry run\" without running a build, add -e which emits what would have run if you ran this from bitbake. If you want to disable the auto-starting of the container, use -d with a comma delineated list of the container image name. If you are familiar with Yocto Project development and multiconfig and wish to use bitbake directly for builds, see the local.conf for variables that need to be set. You can also get the variables by running the mc_build.sh script with the build variables you wish to use along with the -e option and prepending the BB_ENV_EXTRAWHITE output to the bitbake command you which to use in order to pass them in on the command line. Note: The script can not always determine the vendor name, if you encounter that issue,or just want to be sure, you can use -v <VENDOR> to specify. Build Script Examples # Builds an ONLPV1 Guest, installs it on a mender updatable host and autostarts ../mc_build.sh -m stordis-bf2556x-1t -c guest:mion-guest-onlpv1 -h host-mender:mion-host # Builds just an ONLPV1 Guest. Useful for creating update artifacts. ../mc_build.sh -m stordis-bf2556x-1t -c guest:mion-guest-onlpv1 # Builds an ONLPV1 ONIE image ../mc_build.sh -m stordis-bf2556x-1t -h host-onie:mion-onie-image-onlpv1 # Builds an image with ONLPV2 and ONLPV1 guests but disables ONLPV1 guest ../mc_build.sh -m stordis-bf2556x-1t -c guest:mion-guest-onlpv1,guest:mion-guest-onlpv2 -h host-mender:mion-host -d mion-guest-onlpv1 # Emits the commandline to build an image with ONLPV2 and ONLPV1 guests but disables ONLPV1 guest ../mc_build.sh -e -m stordis-bf2556x-1t -c guest:mion-guest-onlpv1,guest:mion-guest-onlpv2 -h host-mender:mion-host -d mion-guest-onlpv1 Image Creation Once you've gone through the pre-requirements, have your build host set up, and looked at the build script examples, you're ready to create an image yourself. After you run the mc_build.sh script, bitbake gets called, first parsing all the recipes and making sure your local.conf and bblayers.conf looks good, before going to work \"baking\" your image! Much like a multilayer cake, how fast it gets finished is going to depend on the quantity and complexities of the layers, and how reliable your baking setup is! While you enjoy a relaxing break, keep an eye on the screen for something like this: Assuming you are still in the build directory, you'll find the finished images and related items such as the onie-installer in tmp-glibc/deploy/images/<VENDOR>-<MACHINE>/ Build Process Plan on the initial run to take some time, with following builds being much less. For a Linux VM with V Virtual CPUs and 32G RAM, a build will likely break down as follows: Fetching sources and setting up build environment : 5 minutes Building of the image : 3 hours Deploying mion via ONIE : 5 minutes per switch You're finally done with this guide? Now it's time for Installing mion ! This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License .","title":"Getting Started Guide"},{"location":"getting-started/#table-of-contents","text":"","title":"Table of contents"},{"location":"getting-started/#pre-requirements","text":"If you are new to Yocto Project development, check out Overview and Concepts and the Quick Build guide to set up your build host and become familiar with the workflow. We provide a quick overview below. Already familiar and want to get started building mion? Then checkout the mion README for a quick-start guide.","title":"Pre-Requirements"},{"location":"getting-started/#build-host","text":"Whether on a laptop or a high-powered build server, make sure that... You have 50 GB available Why so much when the resulting image is so tiny? Think of it as a small cake; Even if the end result can fit in a small box, you will still need a whole kitchen in order to bake it. git 1.8.3.1 or greater tar 1.28 or greater python 3.5.0 or greater gcc 5.0 or greater","title":"Build Host"},{"location":"getting-started/#ubuntu-1604-1804-and-debian-gnulinux-8x-10x","text":"sudo apt-get install gawk wget git-core diffstat unzip texinfo gcc-multilib \\ build-essential chrpath socat cpio python3 python3-pip python3-pexpect \\ xz-utils debianutils iputils-ping python3-git python3-jinja2 libegl1-mesa \\ libsdl1.2-dev pylint3 xterm for Ubuntu, make sure that you are using bash rather than dash: sudo dpkg-reconfigure dash select No to use bash.","title":"Ubuntu (16.04 -18.04) and Debian GNU/Linux (8.x-10.x)"},{"location":"getting-started/#fedora-28-32","text":"sudo dnf install gawk make wget tar bzip2 gzip python3 unzip perl patch \\ diffutils diffstat git cpp gcc gcc-c++ glibc-devel texinfo chrpath \\ ccache perl-Data-Dumper perl-Text-ParseWords perl-Thread-Queue perl-bignum\\ socat python3-pexpect findutils which file cpio python python3-pip xz \\ python3-GitPython python3-jinja2 SDL-devel xterm rpcgen","title":"Fedora (28-32)"},{"location":"getting-started/#centos7x","text":"$ sudo yum install -y epel-release $ sudo yum makecache $ sudo yum install gawk make wget tar bzip2 gzip python3 unzip perl patch \\ diffutils diffstat git cpp gcc gcc-c++ glibc-devel texinfo chrpath socat \\ perl-Data-Dumper perl-Text-ParseWords perl-Thread-Queue python36-pip xz \\ which SDL-devel xterm $ sudo pip3 install GitPython jinja2","title":"CentOS(7.x)"},{"location":"getting-started/#opensuse-leap-151","text":"sudo zypper install python gcc gcc-c++ git chrpath make wget python-xml \\ diffstat makeinfo python-curses patch socat python3 python3-curses tar \\ python3-pip python3-pexpect xz which python3-Jinja2 Mesa-libEGL1 \\ libSDL-devel xterm rpcgen $ sudo pip3 install GitPython The above requirements and build host packages are originally from Yocto Project Quick Build Copyright 2010-2020 Linux Foundation, under the Creative Commons Attribution-Share Alike 2.0 UK: England & Wales . We added the cake.","title":"OpenSUSE Leap (15.1)"},{"location":"getting-started/#obtaining-mion-sources","text":"If you are ready to start building mion: git clone --recursive git@github.com:NetworkGradeLinux/mion.git cd mion # To obtain related mion layers: git clone git@github.com:NetworkGradeLinux/meta-mion.git # Obtain the mion hardware layer git clone git@github.com:NetworkGradeLinux/meta-mion-bsp.git The main repository for mion contains sub-modules for OpenEmbedded and Yocto Project of layers which mion depends on. To properly clone them, rather than just the top directory, the --recursive argument is required. mion provides the build script (mc_build.sh) and configuration files in build/conf/ . The meta-mion layer provides mion distro configuration.","title":"Obtaining mion Sources"},{"location":"getting-started/#basic-usage","text":"To begin, set up the build environment using the OpenEmbedded init script: source openembedded-core/oe-init-build-env This will place you in the build directory. Afterwords you can use our build script. Running ../mc_build.sh without arguments displays basic usage. In general: ../mc_build.sh -m <machine> -c <container config>:<container image> -h <host config>:<host_image> -d container_image To do a \"dry run\" without running a build, add -e which emits what would have run if you ran this from bitbake. If you want to disable the auto-starting of the container, use -d with a comma delineated list of the container image name. If you are familiar with Yocto Project development and multiconfig and wish to use bitbake directly for builds, see the local.conf for variables that need to be set. You can also get the variables by running the mc_build.sh script with the build variables you wish to use along with the -e option and prepending the BB_ENV_EXTRAWHITE output to the bitbake command you which to use in order to pass them in on the command line. Note: The script can not always determine the vendor name, if you encounter that issue,or just want to be sure, you can use -v <VENDOR> to specify.","title":"Basic Usage"},{"location":"getting-started/#build-script-examples","text":"# Builds an ONLPV1 Guest, installs it on a mender updatable host and autostarts ../mc_build.sh -m stordis-bf2556x-1t -c guest:mion-guest-onlpv1 -h host-mender:mion-host # Builds just an ONLPV1 Guest. Useful for creating update artifacts. ../mc_build.sh -m stordis-bf2556x-1t -c guest:mion-guest-onlpv1 # Builds an ONLPV1 ONIE image ../mc_build.sh -m stordis-bf2556x-1t -h host-onie:mion-onie-image-onlpv1 # Builds an image with ONLPV2 and ONLPV1 guests but disables ONLPV1 guest ../mc_build.sh -m stordis-bf2556x-1t -c guest:mion-guest-onlpv1,guest:mion-guest-onlpv2 -h host-mender:mion-host -d mion-guest-onlpv1 # Emits the commandline to build an image with ONLPV2 and ONLPV1 guests but disables ONLPV1 guest ../mc_build.sh -e -m stordis-bf2556x-1t -c guest:mion-guest-onlpv1,guest:mion-guest-onlpv2 -h host-mender:mion-host -d mion-guest-onlpv1","title":"Build Script Examples"},{"location":"getting-started/#image-creation","text":"Once you've gone through the pre-requirements, have your build host set up, and looked at the build script examples, you're ready to create an image yourself. After you run the mc_build.sh script, bitbake gets called, first parsing all the recipes and making sure your local.conf and bblayers.conf looks good, before going to work \"baking\" your image! Much like a multilayer cake, how fast it gets finished is going to depend on the quantity and complexities of the layers, and how reliable your baking setup is! While you enjoy a relaxing break, keep an eye on the screen for something like this: Assuming you are still in the build directory, you'll find the finished images and related items such as the onie-installer in tmp-glibc/deploy/images/<VENDOR>-<MACHINE>/","title":"Image Creation"},{"location":"getting-started/#build-process","text":"Plan on the initial run to take some time, with following builds being much less. For a Linux VM with V Virtual CPUs and 32G RAM, a build will likely break down as follows: Fetching sources and setting up build environment : 5 minutes Building of the image : 3 hours Deploying mion via ONIE : 5 minutes per switch You're finally done with this guide? Now it's time for Installing mion ! This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License .","title":"Build Process"},{"location":"glossary/","text":"Glossary mion BitBake Recipe : Basic metadata file that describes the building of a package. Includes descriptions, locations srunc : Simple runc ; lightweight command line utility for managing containers in mion. General ACL : Access Control List ASIC : Application-Specific Integrated Circuit BMC : Baseboard Management Controller BSP : Board Support Package CERT : Computer Emergency Response Team CNI : Critical National Infrastructure CRUD : Create, read, update and delete FPGA : Field Programmable Gate Array i2c : Inter-IC, a simple device communications bus INT : In-band Network Telemetry LAN : Local Area Network LFN : Linux Foundation Networking Fund MAC : Media Access Control address MAN : Metropolitan Area Network mion : Mini Infrastucture Operating System for Networks - mion.io NFV : network function virtualization NIC : Network Interface Card NOS : network operating system OCI Container : An implementation of operating system-level virtualisation. The main key feature is that they isolate applications running inside from the operating system and other applications. OCP : Open Compute Project ODL : OpenDaylight ODN : optical distribution network OLT : Optical Line Terminal ONF : Open Networking Foundation ONL : Open Network Linux ONLP : Open Network Linux Platform ONOS : Open Network Operating System ONS : Open Networking Summit ONU : optical network unit OSI model: Open Systems Interconnection model P4 : programming language - https://p4.org/ PPTP : Point-to-Point Tunneling Protocol PTP : Precision Time Protocol RAN : Radio Access Network RDMA : Remote Direct Memory Access RISC : reduced instruction set computing - https://riscv.org/ SAI : Switch Abstraction Interface - https://github.com/opencomputeproject/SAI SAL : Switch Abstraction Layer SDI : Serial Digital Interface SDM : Switching Database Manager SDN : software defined networking SONiC : Software for Open Networking in the Cloud TCAM : Ternary CAM (Content Addressable Memory) TSN : Time Sensitive Networking VNF : Virtualized Network Function WAN : Wide Area Network XCVR : Transceiver","title":"Glossary"},{"location":"glossary/#glossary","text":"","title":"Glossary"},{"location":"glossary/#mion","text":"BitBake Recipe : Basic metadata file that describes the building of a package. Includes descriptions, locations srunc : Simple runc ; lightweight command line utility for managing containers in mion.","title":"mion"},{"location":"glossary/#general","text":"ACL : Access Control List ASIC : Application-Specific Integrated Circuit BMC : Baseboard Management Controller BSP : Board Support Package CERT : Computer Emergency Response Team CNI : Critical National Infrastructure CRUD : Create, read, update and delete FPGA : Field Programmable Gate Array i2c : Inter-IC, a simple device communications bus INT : In-band Network Telemetry LAN : Local Area Network LFN : Linux Foundation Networking Fund MAC : Media Access Control address MAN : Metropolitan Area Network mion : Mini Infrastucture Operating System for Networks - mion.io NFV : network function virtualization NIC : Network Interface Card NOS : network operating system OCI Container : An implementation of operating system-level virtualisation. The main key feature is that they isolate applications running inside from the operating system and other applications. OCP : Open Compute Project ODL : OpenDaylight ODN : optical distribution network OLT : Optical Line Terminal ONF : Open Networking Foundation ONL : Open Network Linux ONLP : Open Network Linux Platform ONOS : Open Network Operating System ONS : Open Networking Summit ONU : optical network unit OSI model: Open Systems Interconnection model P4 : programming language - https://p4.org/ PPTP : Point-to-Point Tunneling Protocol PTP : Precision Time Protocol RAN : Radio Access Network RDMA : Remote Direct Memory Access RISC : reduced instruction set computing - https://riscv.org/ SAI : Switch Abstraction Interface - https://github.com/opencomputeproject/SAI SAL : Switch Abstraction Layer SDI : Serial Digital Interface SDM : Switching Database Manager SDN : software defined networking SONiC : Software for Open Networking in the Cloud TCAM : Ternary CAM (Content Addressable Memory) TSN : Time Sensitive Networking VNF : Virtualized Network Function WAN : Wide Area Network XCVR : Transceiver","title":"General"},{"location":"i2c-issues/","text":"I2C Issues I2C (I squared C) is a serial communication bus, useful for it's simple and low cost design. ONLP platform implementations often rely on i2c capability to talk to various hardware components. This functionality has changed greatly amongst kernel versions, which ONL has been forced to handle. Because mion provides a fixed kernel, this has platform maintainers will have to: Make sure any implementations that use i2c headers directly are using the correct versions: i2c/smbus.h , linux/i2c-dev.h ; For onlps / onlpdump and platform targets, use the templates, or pass -li2c to to targets using GLOBAL_LINK_FLAGS . BISDN established the majority of changes in this case. Detail The linux kernel provides two files of interest: 'linux/i2c.h and linux/i2c-dev.h . These were present in the initial commit of kernel 2.6.12 to GitHub which was released in 2005. The chief problem is that the i2ctools development library header file also provides linux/i2c-dev.h , with them defining different things throughout their history. This is all fixed now, with i2ctools providing the i2c/smbus.h file instead, and (I believe), most of the other definitions being handled by the kernel headers. However, this is not as easy as that, with different base operating systems having specific versions of i2ctools available to it. For ONL, the package repositories they use are Debian based, and as such: * Debian 8 (jessie) provides i2ctools version 3; * Debian 9 (stretch) provides i2ctools version 3; * Debian 10 (buster) provides i2ctools version 4; Because ONL builds across these three Debian \"versions\", they have to handle this problem in some way. Their solution is to create a file linux/i2c-devices.h . This appears to be a copy of the file linux/i2c-dev.h which is copied from the host used to create the Docker image. The consequence of this is that if the Docker image is created by a vendor, they may not get a version of the file they were expecting, depending on the kernel version and whether i2c-tools is installed. While ONLP has a prepocessor conditional that can switch out which headers are included ( ONLPLIB_CONFIG_I2C_USE_CUSTOM_HEADER ), it's not strictly speaking \"custom\". The default is to use the custom header definitions ( linux/i2c-devices.h ), which as we have discussed, is already baked into the ONL builder docker image. Further, some of the structures may be defined multiple times. The example that has particular issues with ONL is union i2c_smbus_data which is defined in both: * linux/i2c.h : in kernel since at least 2.6.12 going by GitHub history. * linux/i2c-dev.h : provided by i2c-tools (libi2c-dev) version 3. At least one vendor has declared a source file containing their own definition of union i2c_smbus_data , rather than go through the hassle of dealing with it externally. Finally, as it compares to mion, we are not building the same kernels is ONL, and we are not using the same packaging, and therefore, ONL's solution may not work (this is platform dependent). The recipes for mion, with the kernel version being used, means that: * i2c-tools version 4 is used; * The linux header do not include all the smbus defintions (i.e., i2c_smbus_data ) which are defined in: * i2c/smbus.h Therefore: * We can modify the the custom header to use the expected includes in packages/base/any/onlp/src/onlplib/module/src/i2c.c : #if ONLPLIB_CONFIG_I2C_USE_CUSTOM_HEADER == 1 #include <linux/i2c-dev.h> #include <i2c/smbus.h> #else #include <linux/i2c-dev.h> #endif This way, platforms don't have to update the i2c definitions everywhere. Platforms that don't use the templates will have to add -li2c to the GLOBAL_LINK_LIBS in their Makefiles for onlpdump / onlps and their platform library target. * Because i2c-tools 2 requires a library libi2c0 , we need to add the relevant linker flag to various targets. * For platform code, this can either be done in the ONL provided templates (and therefore no changes to platform code), or if not, altered in the platform target makefiles themselves. The templates can be found at packages/base/any/onlp/builds/platform . * For platform independent targets (e.g., onlpd ), their Makefiles will also need to be updated. These are located in their respective directories at packages/base/any/onlp/builds * Finally, any additional targets inside BigCode or Infra will need to be updated, but these are non-functional in the sense that they will be for things like unit-tests. The code that these repositories provide are modules and apart from testing, aren't really supposed to build themselves.","title":"I2C Issues"},{"location":"i2c-issues/#i2c-issues","text":"I2C (I squared C) is a serial communication bus, useful for it's simple and low cost design. ONLP platform implementations often rely on i2c capability to talk to various hardware components. This functionality has changed greatly amongst kernel versions, which ONL has been forced to handle. Because mion provides a fixed kernel, this has platform maintainers will have to: Make sure any implementations that use i2c headers directly are using the correct versions: i2c/smbus.h , linux/i2c-dev.h ; For onlps / onlpdump and platform targets, use the templates, or pass -li2c to to targets using GLOBAL_LINK_FLAGS . BISDN established the majority of changes in this case.","title":"I2C Issues"},{"location":"i2c-issues/#detail","text":"The linux kernel provides two files of interest: 'linux/i2c.h and linux/i2c-dev.h . These were present in the initial commit of kernel 2.6.12 to GitHub which was released in 2005. The chief problem is that the i2ctools development library header file also provides linux/i2c-dev.h , with them defining different things throughout their history. This is all fixed now, with i2ctools providing the i2c/smbus.h file instead, and (I believe), most of the other definitions being handled by the kernel headers. However, this is not as easy as that, with different base operating systems having specific versions of i2ctools available to it. For ONL, the package repositories they use are Debian based, and as such: * Debian 8 (jessie) provides i2ctools version 3; * Debian 9 (stretch) provides i2ctools version 3; * Debian 10 (buster) provides i2ctools version 4; Because ONL builds across these three Debian \"versions\", they have to handle this problem in some way. Their solution is to create a file linux/i2c-devices.h . This appears to be a copy of the file linux/i2c-dev.h which is copied from the host used to create the Docker image. The consequence of this is that if the Docker image is created by a vendor, they may not get a version of the file they were expecting, depending on the kernel version and whether i2c-tools is installed. While ONLP has a prepocessor conditional that can switch out which headers are included ( ONLPLIB_CONFIG_I2C_USE_CUSTOM_HEADER ), it's not strictly speaking \"custom\". The default is to use the custom header definitions ( linux/i2c-devices.h ), which as we have discussed, is already baked into the ONL builder docker image. Further, some of the structures may be defined multiple times. The example that has particular issues with ONL is union i2c_smbus_data which is defined in both: * linux/i2c.h : in kernel since at least 2.6.12 going by GitHub history. * linux/i2c-dev.h : provided by i2c-tools (libi2c-dev) version 3. At least one vendor has declared a source file containing their own definition of union i2c_smbus_data , rather than go through the hassle of dealing with it externally. Finally, as it compares to mion, we are not building the same kernels is ONL, and we are not using the same packaging, and therefore, ONL's solution may not work (this is platform dependent). The recipes for mion, with the kernel version being used, means that: * i2c-tools version 4 is used; * The linux header do not include all the smbus defintions (i.e., i2c_smbus_data ) which are defined in: * i2c/smbus.h Therefore: * We can modify the the custom header to use the expected includes in packages/base/any/onlp/src/onlplib/module/src/i2c.c : #if ONLPLIB_CONFIG_I2C_USE_CUSTOM_HEADER == 1 #include <linux/i2c-dev.h> #include <i2c/smbus.h> #else #include <linux/i2c-dev.h> #endif This way, platforms don't have to update the i2c definitions everywhere. Platforms that don't use the templates will have to add -li2c to the GLOBAL_LINK_LIBS in their Makefiles for onlpdump / onlps and their platform library target. * Because i2c-tools 2 requires a library libi2c0 , we need to add the relevant linker flag to various targets. * For platform code, this can either be done in the ONL provided templates (and therefore no changes to platform code), or if not, altered in the platform target makefiles themselves. The templates can be found at packages/base/any/onlp/builds/platform . * For platform independent targets (e.g., onlpd ), their Makefiles will also need to be updated. These are located in their respective directories at packages/base/any/onlp/builds * Finally, any additional targets inside BigCode or Infra will need to be updated, but these are non-functional in the sense that they will be for things like unit-tests. The code that these repositories provide are modules and apart from testing, aren't really supposed to build themselves.","title":"Detail"},{"location":"imagetypes/","text":"Image Types and Multiconfig Introduction There are three main types of images in mion: guest images : Provide container images for the host OS host images : Small host image for running guests normal images : Provides a host image useful for bare image installs or ONIE installers As well as these image types there are also guest packaging recipes which package the guest images up and install them on the host image during build time. These are stored in recipes-core/mion-image-packaging and should be named in the format -pkg Images mion-guest-onlpv1 : A small guest with ONLPv1 installed mion-guest-onlpv2 : A small guest with ONLPv2 installed mion-host : Small host image for running guests. mion-image-onlpv1 : A small image with ONLPv1 installed mion-image-onlpv2 : A small image with ONLPv2 installed Multiconfig mion uses multiconfig to provide system profiles for either guest or host (including non-container supporting images). We utilise this to enable endusers to use one image for multiple use cases, for example, using mion-image-onlpv1 as both a QEMU image or an ONIE installer image. guest.conf : Used to build guests host.conf : Used to build hosts host-mender.conf : Used to build mender updatable hosts host-onie.conf : Used to build hosts packaged in ONIE installers","title":"Image Types"},{"location":"imagetypes/#image-types-and-multiconfig","text":"","title":"Image Types and Multiconfig"},{"location":"imagetypes/#introduction","text":"There are three main types of images in mion: guest images : Provide container images for the host OS host images : Small host image for running guests normal images : Provides a host image useful for bare image installs or ONIE installers As well as these image types there are also guest packaging recipes which package the guest images up and install them on the host image during build time. These are stored in recipes-core/mion-image-packaging and should be named in the format -pkg","title":"Introduction"},{"location":"imagetypes/#images","text":"mion-guest-onlpv1 : A small guest with ONLPv1 installed mion-guest-onlpv2 : A small guest with ONLPv2 installed mion-host : Small host image for running guests. mion-image-onlpv1 : A small image with ONLPv1 installed mion-image-onlpv2 : A small image with ONLPv2 installed","title":"Images"},{"location":"imagetypes/#multiconfig","text":"mion uses multiconfig to provide system profiles for either guest or host (including non-container supporting images). We utilise this to enable endusers to use one image for multiple use cases, for example, using mion-image-onlpv1 as both a QEMU image or an ONIE installer image. guest.conf : Used to build guests host.conf : Used to build hosts host-mender.conf : Used to build mender updatable hosts host-onie.conf : Used to build hosts packaged in ONIE installers","title":"Multiconfig"},{"location":"installing_mion/","text":"Installing mion Introduction The Mion 0.9 release currently supports a single platform - the APS Networks (formerly STORDIS) BF2556X-1T Image types Two build options are provided which build different types of images depending on the intended installation method: * Mender images produce a .hddimg file which can be written to a USB key and installed on bare metal * ONIE compliant image .bin file which can be installed on a switch which has ONIE installed Mender The mender image can be flashed to a USB key using the dd command or a similar tool and plugged into the switch. It will probably be necessary to change the boot order in in the switches UEFI (BIOS) so that it boots from the USB key. Once the USB key has sucessfully booted it will ask for confirmation to install the image Pease not that this image is a bare metal image and will completly erase any other partitions such as ONIE or other installed OSes ONIE The ONIE image .bin file can be transfered installed on the system using any of the ONIE supported installation methods found here . In testing it has been found that a tftp server with a known hostname works well for installation but many other options are available. The ONIE will be installed alongside other existing OSes, will not erase any of the hard drive and automatically updates the boot options. Please note that the ONIE image does not currently support the simple-runc container system tooling.","title":"Installing mion"},{"location":"installing_mion/#installing-mion","text":"","title":"Installing mion"},{"location":"installing_mion/#introduction","text":"The Mion 0.9 release currently supports a single platform - the APS Networks (formerly STORDIS) BF2556X-1T","title":"Introduction"},{"location":"installing_mion/#image-types","text":"Two build options are provided which build different types of images depending on the intended installation method: * Mender images produce a .hddimg file which can be written to a USB key and installed on bare metal * ONIE compliant image .bin file which can be installed on a switch which has ONIE installed","title":"Image types"},{"location":"installing_mion/#mender","text":"The mender image can be flashed to a USB key using the dd command or a similar tool and plugged into the switch. It will probably be necessary to change the boot order in in the switches UEFI (BIOS) so that it boots from the USB key. Once the USB key has sucessfully booted it will ask for confirmation to install the image Pease not that this image is a bare metal image and will completly erase any other partitions such as ONIE or other installed OSes","title":"Mender"},{"location":"installing_mion/#onie","text":"The ONIE image .bin file can be transfered installed on the system using any of the ONIE supported installation methods found here . In testing it has been found that a tftp server with a known hostname works well for installation but many other options are available. The ONIE will be installed alongside other existing OSes, will not erase any of the hard drive and automatically updates the boot options. Please note that the ONIE image does not currently support the simple-runc container system tooling.","title":"ONIE"},{"location":"resources/","text":"Resources mion mion Base Mion github repository. meta-mion GitHub repository for the base layer meta-mion-stordis reference platform layer for APS Networks (formerly STORDIS) BF2556x-1t switch, with ONLPv1 support. The Yocto Project : Project that helps developers create custom Linux based systems regardless of hardware. Maintains bitbake and OpenEmbedded Core. Poky : Reference distribution of OpenEmbedded maintained by Yocto Project BitBake User Manual : Has direct links for Recipes Configuration files Classes Layers Append files Yocto Documentation Yocto Project Overview and Concepts Manual Building your own recipes from first principles OpenEmbedded Build framework for embedded Linux * OpenEmbedded-Core : * Core support for machine architectures (x86-64, arm, etc) * Only builds for QEMU machines, and not physical targets * Layer : A collection of recipes and configuration that can be used on top of OpenEmbedded Core. * OpenEmbedded layer index General runc lightweight OCI container runtime","title":"Resources"},{"location":"resources/#resources","text":"","title":"Resources"},{"location":"resources/#mion","text":"mion Base Mion github repository. meta-mion GitHub repository for the base layer meta-mion-stordis reference platform layer for APS Networks (formerly STORDIS) BF2556x-1t switch, with ONLPv1 support.","title":"mion"},{"location":"resources/#the-yocto-project","text":"Project that helps developers create custom Linux based systems regardless of hardware. Maintains bitbake and OpenEmbedded Core. Poky : Reference distribution of OpenEmbedded maintained by Yocto Project BitBake User Manual : Has direct links for Recipes Configuration files Classes Layers Append files Yocto Documentation Yocto Project Overview and Concepts Manual Building your own recipes from first principles","title":"The Yocto Project:"},{"location":"resources/#openembedded","text":"Build framework for embedded Linux * OpenEmbedded-Core : * Core support for machine architectures (x86-64, arm, etc) * Only builds for QEMU machines, and not physical targets * Layer : A collection of recipes and configuration that can be used on top of OpenEmbedded Core. * OpenEmbedded layer index","title":"OpenEmbedded"},{"location":"resources/#general","text":"runc lightweight OCI container runtime","title":"General"},{"location":"trusted-platform-module/","text":"Trusted Platform Module Trusted Platform Module (TPM) support in mion : TPM support is provided by the inclusion of the meta-security/meta-tpm layer. For any system with a TPM2 chip onboard adding \"tpm2\" to the MACHINE_FEATURES will result in the inclusion of the required kernel drives and a number of user-space TPM2 tools. This is defined in machine specific configuration in meta-mion-bsp/<vendor>/conf/machine/<machine_name>.conf The kernel module should be automatically loaded on boot and will create a device node (usually /dev/tpm0 ) which gives access to the hardware. meta-security/meta-tpm also provides a package group, packagegroup-security-tpm2.bb , which is included automatically and installs a number of common user space TPM2 tools. Additional tools are available in meta-security/meta-tpm if needed.","title":"Trusted Platform Module"},{"location":"trusted-platform-module/#trusted-platform-module","text":"Trusted Platform Module (TPM) support in mion : TPM support is provided by the inclusion of the meta-security/meta-tpm layer. For any system with a TPM2 chip onboard adding \"tpm2\" to the MACHINE_FEATURES will result in the inclusion of the required kernel drives and a number of user-space TPM2 tools. This is defined in machine specific configuration in meta-mion-bsp/<vendor>/conf/machine/<machine_name>.conf The kernel module should be automatically loaded on boot and will create a device node (usually /dev/tpm0 ) which gives access to the hardware. meta-security/meta-tpm also provides a package group, packagegroup-security-tpm2.bb , which is included automatically and installs a number of common user space TPM2 tools. Additional tools are available in meta-security/meta-tpm if needed.","title":"Trusted Platform Module"},{"location":"community/Coc-interpretation/","text":"Interpretation of the Code of Conduct Taking inspiration from the Linux Kernel Contributor Code of Conduct Interpretation , we are providing our interpretation of the aforementioned Code of Conduct which has been adopted for use for mion; this allows for adaptation specific to our project. As Network Grade Linux grows and changes over time, so may our interpretation. Expect this document to be subject to change. Changes to our interpretation, if and when they do occur, will be announced through the appropriate community communication channels, and a changelog will be attached at the end of this document. Standards While the Code of Conduct provides examples of behavior that contributes to a positive environment, we acknowledge that these are only examples, and that they serve as a point of reference; that is, the behavior we expect in our community goes beyond the examples. We also believe that our standards should not only avoid being disrespectful or harmful, but should work towards the goal of actively welcoming others into the community. In other words, we strive to create an environment where individuals know that they will be respected and welcomed before they joined and not only after they have done so. In line with our standards is our style-guide , which we expect contributors to be familiar with, and to follow our guidelines on Inclusivity and Supporting Diversity. Responsibilities Maintainers Definition of Maintainers When referenced in the Code of Conduct, maintainer applies to those responsible for the approval of merging branches, acceptance of patches, and general maintenance of any repository belonging to Network Grade Linux. The term also extends to the individual or individuals who monitor general communication channels such as, but not limited to any Slack channels not specific to a given repository. This role belongs to the project team contact or contacts provided under the Enforcement section of our Code of Conduct. The maintainers are generally listed within each repository README.md . Code of Conduct Responsibilities for Maintainers Our maintainers are expected to model the Code of Conduct, and to address unacceptable behavior. Responses to possible violations are expected to be performed in a timely manor, while also taking the time to communicate with the project's leaders to ensure that any actions taken are done so in a thoughtful manor which represents our values. Scope The scope extends to accounts which submit patches and pull requests, such as on github. Enforcement It is preferable that reports are submitted to the project team lead mentioned under the Code of Conduct. That said, it is also expected that all maintainers and project leadership will monitor the community, actively addressing situations by discussing possible violation with leadership, rather than only taking action when a report is made.","title":"Interpretation of the Code of Conduct"},{"location":"community/Coc-interpretation/#interpretation-of-the-code-of-conduct","text":"Taking inspiration from the Linux Kernel Contributor Code of Conduct Interpretation , we are providing our interpretation of the aforementioned Code of Conduct which has been adopted for use for mion; this allows for adaptation specific to our project. As Network Grade Linux grows and changes over time, so may our interpretation. Expect this document to be subject to change. Changes to our interpretation, if and when they do occur, will be announced through the appropriate community communication channels, and a changelog will be attached at the end of this document.","title":"Interpretation of the Code of Conduct"},{"location":"community/Coc-interpretation/#standards","text":"While the Code of Conduct provides examples of behavior that contributes to a positive environment, we acknowledge that these are only examples, and that they serve as a point of reference; that is, the behavior we expect in our community goes beyond the examples. We also believe that our standards should not only avoid being disrespectful or harmful, but should work towards the goal of actively welcoming others into the community. In other words, we strive to create an environment where individuals know that they will be respected and welcomed before they joined and not only after they have done so. In line with our standards is our style-guide , which we expect contributors to be familiar with, and to follow our guidelines on Inclusivity and Supporting Diversity.","title":"Standards"},{"location":"community/Coc-interpretation/#responsibilities","text":"","title":"Responsibilities"},{"location":"community/Coc-interpretation/#maintainers","text":"","title":"Maintainers"},{"location":"community/Coc-interpretation/#definition-of-maintainers","text":"When referenced in the Code of Conduct, maintainer applies to those responsible for the approval of merging branches, acceptance of patches, and general maintenance of any repository belonging to Network Grade Linux. The term also extends to the individual or individuals who monitor general communication channels such as, but not limited to any Slack channels not specific to a given repository. This role belongs to the project team contact or contacts provided under the Enforcement section of our Code of Conduct. The maintainers are generally listed within each repository README.md .","title":"Definition of Maintainers"},{"location":"community/Coc-interpretation/#code-of-conduct-responsibilities-for-maintainers","text":"Our maintainers are expected to model the Code of Conduct, and to address unacceptable behavior. Responses to possible violations are expected to be performed in a timely manor, while also taking the time to communicate with the project's leaders to ensure that any actions taken are done so in a thoughtful manor which represents our values.","title":"Code of Conduct Responsibilities for Maintainers"},{"location":"community/Coc-interpretation/#scope","text":"The scope extends to accounts which submit patches and pull requests, such as on github.","title":"Scope"},{"location":"community/Coc-interpretation/#enforcement","text":"It is preferable that reports are submitted to the project team lead mentioned under the Code of Conduct. That said, it is also expected that all maintainers and project leadership will monitor the community, actively addressing situations by discussing possible violation with leadership, rather than only taking action when a report is made.","title":"Enforcement"},{"location":"community/Community/","text":"The Network Grade Linux Community Welcome to Network Grade Linux/mion! Community is where open source lives and thrives. Whether you have questions about using mion or code to contribute, below you'll find useful information on how to participate and become a member of our community! First, please read and agree to our Code of Conduct . How to Participate There are a number of ways to participate, from contributing code and documentation to communicating with others in the community. Each repository may have different requirements for contributing, in which case it can be found in the CONTRIBUTING.md in the repository's root. For an overview of how to contribute, including patch guidelines and git workflow, see mion/CONTRIBUTING.md . Getting in Touch The best way to get in touch is our Slack , or you can attend one of our public meetings. Slack All are welcome to stop by, introduce themselves, and say hi to us over on Slack! Here's our current slack channels, and what each are used for: general: news, announcements and project wide discussions, good place to introduce yourself to everyone! gh-notify: reserved for automated github updates on CI builds, issue statuses, and pull requests network-grade-linux: mostly technical discussions, this is where you should ask questions regarding mion random: this is a great place to say hi and simply hangout and chat While not required, we suggest filling out your slack profile with what you do, and adding where you work in parentheses in your display name. Keep in mind that many of us are in different time zones, so replies may take some time. Public Meetings Public meetings are subject to changes, it is always best to check on our Slack #general channel for updates. Meetings are done over Zoom. NGL Weekly Bug Scrub : Every Wednesday, 1600-1700 UTC (04:00-05:00 PM) Documentation meeting : Every other Thursday starting on 2021-01-14 at 1200-1300 UTC (12:00-01:00pm)","title":"Community"},{"location":"community/Community/#the-network-grade-linux-community","text":"Welcome to Network Grade Linux/mion! Community is where open source lives and thrives. Whether you have questions about using mion or code to contribute, below you'll find useful information on how to participate and become a member of our community! First, please read and agree to our Code of Conduct .","title":"The Network Grade Linux Community"},{"location":"community/Community/#how-to-participate","text":"There are a number of ways to participate, from contributing code and documentation to communicating with others in the community. Each repository may have different requirements for contributing, in which case it can be found in the CONTRIBUTING.md in the repository's root. For an overview of how to contribute, including patch guidelines and git workflow, see mion/CONTRIBUTING.md .","title":"How to Participate"},{"location":"community/Community/#getting-in-touch","text":"The best way to get in touch is our Slack , or you can attend one of our public meetings.","title":"Getting in Touch"},{"location":"community/Community/#slack","text":"All are welcome to stop by, introduce themselves, and say hi to us over on Slack! Here's our current slack channels, and what each are used for: general: news, announcements and project wide discussions, good place to introduce yourself to everyone! gh-notify: reserved for automated github updates on CI builds, issue statuses, and pull requests network-grade-linux: mostly technical discussions, this is where you should ask questions regarding mion random: this is a great place to say hi and simply hangout and chat While not required, we suggest filling out your slack profile with what you do, and adding where you work in parentheses in your display name. Keep in mind that many of us are in different time zones, so replies may take some time.","title":"Slack"},{"location":"community/Community/#public-meetings","text":"Public meetings are subject to changes, it is always best to check on our Slack #general channel for updates. Meetings are done over Zoom. NGL Weekly Bug Scrub : Every Wednesday, 1600-1700 UTC (04:00-05:00 PM) Documentation meeting : Every other Thursday starting on 2021-01-14 at 1200-1300 UTC (12:00-01:00pm)","title":"Public Meetings"},{"location":"community/code-of-conduct/","text":"Code of Conduct Our Pledge In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to make participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation. Our Standards Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting and giving constructive criticism Focusing on what is best for the community Showing compassion and kindness towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Our Responsibilities Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful. Scope This Code of Conduct applies within all project spaces, and it also applies when an individual is representing the project or its community in public spaces. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers. Enforcement Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at ben@ageofpeers.com . All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership. Attribution This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq Interpretation See our Interpretation of the Code of Conduct: CoC-interpretation","title":"Code of Conduct"},{"location":"community/code-of-conduct/#code-of-conduct","text":"","title":"Code of Conduct"},{"location":"community/code-of-conduct/#our-pledge","text":"In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to make participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.","title":"Our Pledge"},{"location":"community/code-of-conduct/#our-standards","text":"Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting and giving constructive criticism Focusing on what is best for the community Showing compassion and kindness towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"community/code-of-conduct/#our-responsibilities","text":"Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.","title":"Our Responsibilities"},{"location":"community/code-of-conduct/#scope","text":"This Code of Conduct applies within all project spaces, and it also applies when an individual is representing the project or its community in public spaces. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.","title":"Scope"},{"location":"community/code-of-conduct/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at ben@ageofpeers.com . All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.","title":"Enforcement"},{"location":"community/code-of-conduct/#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq","title":"Attribution"},{"location":"community/code-of-conduct/#interpretation","text":"See our Interpretation of the Code of Conduct: CoC-interpretation","title":"Interpretation"}]}